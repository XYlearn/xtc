/* The following code was generated by JFlex 1.7.0 */

package xtc.lang.cpp;

import xtc.tree.Location;

import xtc.lang.cpp.Syntax.Language;
import xtc.lang.cpp.Syntax.PreprocessorTag;
import xtc.lang.cpp.Syntax.Text;
import xtc.lang.cpp.Syntax.Layout;
import xtc.lang.cpp.Syntax.EOF;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>c.l.lexer</tt>
 */
class CLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\32\1\27\1\32\1\33\1\34\22\0\1\32\1\67\1\31"+
    "\1\35\1\110\1\73\1\70\1\30\1\75\1\76\1\72\1\5\1\77"+
    "\1\63\1\6\1\45\1\2\7\15\2\14\1\105\1\106\1\65\1\66"+
    "\1\64\1\20\1\107\1\17\1\61\1\62\1\17\1\3\1\7\5\1"+
    "\1\11\3\1\1\4\4\1\1\13\2\1\1\16\2\1\1\102\1\26"+
    "\1\103\1\74\1\60\1\0\1\41\1\24\1\50\1\53\1\22\1\23"+
    "\1\44\1\52\1\43\1\1\1\47\1\12\1\54\1\42\1\37\1\57"+
    "\1\1\1\36\1\51\1\46\1\10\1\21\1\40\1\25\1\56\1\55"+
    "\1\100\1\71\1\101\1\104\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\3\1\1\5\1\6"+
    "\4\1\1\7\1\10\2\0\1\11\1\12\1\13\5\1"+
    "\1\14\5\1\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\43\1\45\1\2\1\45\1\46\4\2"+
    "\2\45\1\47\1\50\1\0\2\1\4\5\7\1\1\0"+
    "\1\10\5\0\1\51\3\0\1\52\1\0\4\1\1\53"+
    "\2\1\1\0\1\54\1\55\11\1\1\56\3\1\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\45\1\46\1\0\1\46\4\2\2\100\1\101\3\1"+
    "\4\5\6\1\1\102\1\1\1\103\4\0\5\1\1\104"+
    "\1\1\1\105\31\1\1\106\1\107\1\0\4\100\2\1"+
    "\1\110\1\1\1\111\1\112\1\1\1\113\2\1\2\0"+
    "\4\1\1\114\1\1\1\115\3\1\1\116\1\117\27\1"+
    "\4\100\1\120\3\1\1\121\1\122\2\0\3\1\1\123"+
    "\4\1\1\124\5\1\1\125\11\1\1\126\6\1\1\127"+
    "\3\1\1\130\2\0\1\1\1\131\1\1\1\132\1\133"+
    "\2\1\1\134\1\135\1\136\1\137\1\140\1\1\1\141"+
    "\21\1\2\0\2\1\1\142\1\1\1\143\7\1\1\144"+
    "\3\1\1\145\3\1\1\146\1\147\1\10\1\150\1\151"+
    "\1\152\7\1\1\153\1\154\1\155\2\1\1\156\1\157"+
    "\1\10\1\0\1\160\4\1\1\161\3\1\1\162\2\1"+
    "\1\0\1\10\1\163\2\1\1\164\2\1\1\165\1\166"+
    "\1\1\1\167\1\10\1\0\1\10\6\1\1\170\1\171"+
    "\1\172\1\10\1\173\4\1\1\174\1\1\1\175\3\1"+
    "\1\176\11\1\1\177\2\1\1\200\2\1\1\201\12\1"+
    "\1\202";

  private static int [] zzUnpackAction() {
    int [] result = new int[456];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\u0490\0\u04d9\0\u0522\0\u056b\0\u02da\0\u05b4\0\u05fd\0\u0646"+
    "\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e"+
    "\0\u08d7\0\u0920\0\u0969\0\u09b2\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6"+
    "\0\u0b1f\0\u0b68\0\u0bb1\0\u02da\0\u02da\0\u02da\0\u02da\0\u02da"+
    "\0\u02da\0\u02da\0\u02da\0\u02da\0\u02da\0\u02da\0\u02da\0\u0bfa"+
    "\0\u02da\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e\0\u0d67\0\u0db0\0\u0df9"+
    "\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d\0\u02da\0\u02da\0\u0f66\0\u0faf"+
    "\0\u0ff8\0\u1041\0\u108a\0\u10d3\0\u111c\0\u1165\0\u11ae\0\u11f7"+
    "\0\u1240\0\u1289\0\u12d2\0\u131b\0\u1364\0\u13ad\0\u13f6\0\u143f"+
    "\0\u1488\0\u14d1\0\u151a\0\u02da\0\u0447\0\u1563\0\u15ac\0\u02da"+
    "\0\u15f5\0\u163e\0\u1687\0\u16d0\0\u1719\0\222\0\u1762\0\u17ab"+
    "\0\u17f4\0\u02da\0\u02da\0\u183d\0\u1886\0\u18cf\0\u1918\0\u1961"+
    "\0\u19aa\0\u19f3\0\u1a3c\0\u1a85\0\u1ace\0\u1b17\0\u1b60\0\u1ba9"+
    "\0\u02da\0\u02da\0\u02da\0\u1bf2\0\u02da\0\u1c3b\0\u02da\0\u02da"+
    "\0\u02da\0\u02da\0\u02da\0\u02da\0\u02da\0\u02da\0\u02da\0\u02da"+
    "\0\u02da\0\u1c84\0\u1ccd\0\u1d16\0\u0c8c\0\u0c8c\0\u1d5f\0\u1da8"+
    "\0\u1df1\0\u1e3a\0\u1e83\0\u02da\0\u1ecc\0\u1f15\0\u1f5e\0\u0c8c"+
    "\0\u1fa7\0\u1ff0\0\u2039\0\u2082\0\u20cb\0\u2114\0\u215d\0\u21a6"+
    "\0\u21ef\0\222\0\u2238\0\u02da\0\u2281\0\u22ca\0\u2313\0\u235c"+
    "\0\u23a5\0\u23ee\0\u2437\0\u2480\0\u24c9\0\222\0\u2512\0\222"+
    "\0\u255b\0\u25a4\0\u25ed\0\u2636\0\u267f\0\u26c8\0\u2711\0\u275a"+
    "\0\u27a3\0\u27ec\0\u2835\0\u287e\0\u28c7\0\u2910\0\u2959\0\u29a2"+
    "\0\u29eb\0\u2a34\0\u2a7d\0\u2ac6\0\u2b0f\0\u2b58\0\u2ba1\0\u2bea"+
    "\0\u2c33\0\u02da\0\u02da\0\u2c7c\0\u2cc5\0\u2d0e\0\u2d57\0\u2da0"+
    "\0\u2de9\0\u2e32\0\222\0\u2e7b\0\222\0\222\0\u2ec4\0\222"+
    "\0\u2f0d\0\u2f56\0\u2f9f\0\u2fe8\0\u3031\0\u307a\0\u30c3\0\u310c"+
    "\0\222\0\u3155\0\222\0\u319e\0\u31e7\0\u3230\0\222\0\222"+
    "\0\u3279\0\u32c2\0\u330b\0\u3354\0\u339d\0\u33e6\0\u342f\0\u3478"+
    "\0\u34c1\0\u350a\0\u3553\0\u359c\0\u35e5\0\u362e\0\u3677\0\u36c0"+
    "\0\u3709\0\u3752\0\u379b\0\u37e4\0\u382d\0\u3876\0\u38bf\0\u0c8c"+
    "\0\u3908\0\u3951\0\u399a\0\222\0\u39e3\0\u3a2c\0\u3a75\0\222"+
    "\0\222\0\u3abe\0\u3b07\0\u3b50\0\u3b99\0\u3be2\0\222\0\u3c2b"+
    "\0\u3c74\0\u3cbd\0\u3d06\0\222\0\u3d4f\0\u3d98\0\u3de1\0\u3e2a"+
    "\0\u3e73\0\222\0\u3ebc\0\u3f05\0\u3f4e\0\u3f97\0\u3fe0\0\u4029"+
    "\0\u4072\0\u40bb\0\u4104\0\u414d\0\u4196\0\u41df\0\u4228\0\u4271"+
    "\0\u42ba\0\u4303\0\222\0\u434c\0\u4395\0\u43de\0\222\0\u4427"+
    "\0\u4470\0\u44b9\0\222\0\u4502\0\222\0\222\0\u454b\0\u4594"+
    "\0\222\0\222\0\222\0\222\0\222\0\u45dd\0\222\0\u4626"+
    "\0\u466f\0\u46b8\0\u4701\0\u474a\0\u4793\0\u47dc\0\u4825\0\u486e"+
    "\0\u48b7\0\u4900\0\u4949\0\u4992\0\u49db\0\u4a24\0\u4a6d\0\u4ab6"+
    "\0\u4aff\0\u4b48\0\u4b91\0\u4bda\0\222\0\u4c23\0\222\0\u4c6c"+
    "\0\u4cb5\0\u4cfe\0\u4d47\0\u4d90\0\u4dd9\0\u4e22\0\222\0\u4e6b"+
    "\0\u4eb4\0\u4efd\0\u4f46\0\u4f8f\0\u4fd8\0\u5021\0\222\0\222"+
    "\0\u506a\0\222\0\222\0\222\0\u50b3\0\u50fc\0\u5145\0\u518e"+
    "\0\u51d7\0\u5220\0\u5269\0\u52b2\0\222\0\u52fb\0\u5344\0\u538d"+
    "\0\u53d6\0\222\0\u541f\0\u5468\0\222\0\u54b1\0\u54fa\0\u5543"+
    "\0\u558c\0\u55d5\0\u561e\0\u5667\0\u56b0\0\222\0\u56f9\0\u5742"+
    "\0\u578b\0\u57d4\0\u581d\0\u5866\0\u58af\0\u58f8\0\u5941\0\u598a"+
    "\0\222\0\222\0\u59d3\0\222\0\u5a1c\0\u5a65\0\u5aae\0\u5af7"+
    "\0\u5b40\0\u5b89\0\u5bd2\0\u5c1b\0\u5c64\0\222\0\u5cad\0\222"+
    "\0\u5cf6\0\222\0\u5d3f\0\u5d88\0\u5dd1\0\u5e1a\0\222\0\u5e63"+
    "\0\222\0\u5eac\0\u5ef5\0\u5f3e\0\222\0\u5f87\0\u5fd0\0\u6019"+
    "\0\u6062\0\u60ab\0\u60f4\0\u613d\0\u6186\0\u61cf\0\222\0\u6218"+
    "\0\u6261\0\222\0\u62aa\0\u62f3\0\222\0\u633c\0\u6385\0\u63ce"+
    "\0\u6417\0\u6460\0\u64a9\0\u64f2\0\u653b\0\u6584\0\u65cd\0\222";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[456];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\1\4\2\3\1\5\1\6\1\3\1\7"+
    "\1\10\1\11\1\3\2\12\2\3\1\13\1\14\1\15"+
    "\1\16\1\17\1\3\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\24\1\26\1\27\1\3\1\30\1\31\1\3"+
    "\1\32\1\33\1\34\1\35\1\3\1\36\1\37\1\3"+
    "\1\40\4\3\1\41\2\3\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\27\70\1\71\42\70\1\72\16\70\1\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\7\3\1\0"+
    "\15\3\27\0\1\73\1\74\2\75\1\0\1\76\1\73"+
    "\1\77\1\100\1\101\1\102\1\103\1\74\1\104\1\73"+
    "\1\0\1\73\1\75\2\73\1\104\10\0\7\73\1\0"+
    "\11\73\1\75\3\73\33\0\1\105\60\0\1\106\24\0"+
    "\1\76\3\0\1\107\5\0\2\76\74\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\4\3\1\110\2\3\1\0"+
    "\15\3\27\0\4\3\2\0\11\3\1\0\5\3\2\0"+
    "\1\22\1\23\4\0\7\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\1\3\1\111\5\3"+
    "\1\0\15\3\27\0\1\73\1\12\2\75\1\0\1\76"+
    "\1\73\1\112\1\113\1\114\1\115\2\12\2\73\1\0"+
    "\1\73\1\75\3\73\10\0\7\73\1\0\11\73\1\75"+
    "\3\73\140\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\1\3\1\116\5\3\1\0\15\3\27\0\4\3\2\0"+
    "\3\3\1\117\5\3\1\0\4\3\1\120\10\0\4\3"+
    "\1\121\2\3\1\0\15\3\27\0\4\3\2\0\3\3"+
    "\1\122\5\3\1\0\5\3\10\0\1\3\1\123\5\3"+
    "\1\0\15\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\1\124\6\3\1\0\15\3\55\0\1\24\107\0"+
    "\1\125\1\21\2\0\1\126\1\0\1\21\1\127\7\0"+
    "\1\130\43\0\26\131\1\132\2\0\60\131\26\23\1\133"+
    "\1\0\1\23\1\134\57\23\26\0\1\135\1\21\2\0"+
    "\1\24\1\0\1\24\1\127\7\0\1\130\65\0\1\136"+
    "\3\0\1\137\3\0\1\127\1\0\1\127\1\140\2\0"+
    "\1\141\51\0\4\3\2\0\11\3\1\0\1\3\1\142"+
    "\3\3\10\0\7\3\1\0\15\3\27\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\7\3\1\0\4\3\1\143"+
    "\10\3\27\0\4\3\2\0\1\3\1\144\7\3\1\0"+
    "\5\3\10\0\7\3\1\0\3\3\1\145\11\3\27\0"+
    "\4\3\2\0\11\3\1\0\2\3\1\146\2\3\10\0"+
    "\4\3\1\147\2\3\1\0\15\3\27\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\1\3\1\150\5\3\1\0"+
    "\15\3\73\0\1\151\20\0\1\152\3\0\1\153\17\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\7\3\1\0"+
    "\10\3\1\154\4\3\27\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\1\3\1\155\1\3\1\156\3\3\1\0"+
    "\4\3\1\157\10\3\27\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\2\3\1\160\2\3\1\161\1\3\1\0"+
    "\1\162\3\3\1\163\10\3\27\0\4\3\2\0\11\3"+
    "\1\0\1\3\1\164\3\3\10\0\1\3\1\165\5\3"+
    "\1\0\15\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\7\3\1\0\12\3\1\166\1\167\1\170\111\0"+
    "\1\171\1\172\1\0\1\173\106\0\1\174\1\0\1\175"+
    "\107\0\1\176\1\177\110\0\1\200\110\0\1\201\110\0"+
    "\1\202\1\0\1\203\106\0\1\204\2\0\1\205\105\0"+
    "\1\206\110\0\1\207\110\0\1\210\22\0\27\70\1\0"+
    "\42\70\1\0\16\70\45\0\1\211\44\0\2\73\2\212"+
    "\1\0\12\73\1\0\1\73\1\212\3\73\10\0\7\73"+
    "\1\0\11\73\1\212\3\73\27\0\1\73\1\74\2\75"+
    "\1\0\1\76\1\73\1\77\1\100\1\101\1\102\1\103"+
    "\1\74\2\73\1\0\1\73\1\75\3\73\10\0\7\73"+
    "\1\0\11\73\1\75\3\73\27\0\1\73\1\213\2\212"+
    "\1\214\6\73\2\213\2\73\1\0\1\73\1\212\3\73"+
    "\10\0\7\73\1\0\11\73\1\212\3\73\1\214\26\0"+
    "\1\73\1\76\2\75\1\0\1\73\1\215\1\73\2\215"+
    "\1\73\2\76\2\73\1\0\1\73\1\75\1\215\2\73"+
    "\10\0\7\73\1\0\11\73\1\75\3\73\27\0\2\73"+
    "\2\212\1\0\2\73\1\216\1\217\1\220\5\73\1\0"+
    "\1\73\1\212\3\73\10\0\7\73\1\0\11\73\1\212"+
    "\3\73\27\0\2\73\2\212\1\0\2\73\1\216\1\221"+
    "\1\73\1\216\4\73\1\0\1\73\1\212\3\73\10\0"+
    "\7\73\1\0\11\73\1\212\3\73\27\0\2\73\2\212"+
    "\1\0\2\73\1\216\1\73\1\221\1\216\4\73\1\0"+
    "\1\73\1\212\3\73\10\0\7\73\1\0\11\73\1\212"+
    "\3\73\27\0\2\73\2\212\1\0\3\73\1\217\1\220"+
    "\1\216\4\73\1\0\1\73\1\212\3\73\10\0\7\73"+
    "\1\0\11\73\1\212\3\73\27\0\1\73\1\103\2\75"+
    "\1\0\1\76\5\73\2\103\2\73\1\0\1\73\1\75"+
    "\3\73\10\0\7\73\1\0\11\73\1\75\3\73\27\0"+
    "\1\73\1\222\1\223\1\212\1\0\1\73\1\222\4\73"+
    "\2\222\1\73\1\222\1\0\1\73\1\223\2\222\1\73"+
    "\10\0\3\73\1\222\3\73\1\0\2\73\1\222\2\73"+
    "\1\222\3\73\1\212\1\73\2\222\34\0\1\224\103\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\5\3\1\225"+
    "\1\3\1\0\3\3\1\226\11\3\27\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\4\3\1\227\2\3\1\0"+
    "\15\3\27\0\2\73\2\212\1\0\2\73\1\230\1\231"+
    "\1\232\5\73\1\0\1\73\1\212\3\73\10\0\7\73"+
    "\1\0\11\73\1\212\3\73\27\0\2\73\2\212\1\0"+
    "\2\73\1\230\1\233\1\73\1\230\4\73\1\0\1\73"+
    "\1\212\3\73\10\0\7\73\1\0\11\73\1\212\3\73"+
    "\27\0\2\73\2\212\1\0\2\73\1\230\1\73\1\233"+
    "\1\230\4\73\1\0\1\73\1\212\3\73\10\0\7\73"+
    "\1\0\11\73\1\212\3\73\27\0\2\73\2\212\1\0"+
    "\3\73\1\231\1\232\1\230\4\73\1\0\1\73\1\212"+
    "\3\73\10\0\7\73\1\0\11\73\1\212\3\73\27\0"+
    "\4\3\2\0\3\3\1\234\5\3\1\0\5\3\10\0"+
    "\5\3\1\235\1\3\1\0\15\3\27\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\7\3\1\0\3\3\1\236"+
    "\11\3\27\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\7\3\1\0\1\237\14\3\27\0\4\3\2\0\1\3"+
    "\1\240\7\3\1\0\5\3\10\0\7\3\1\0\15\3"+
    "\27\0\4\3\2\0\11\3\1\0\5\3\10\0\1\3"+
    "\1\241\5\3\1\0\15\3\27\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\1\242\6\3\1\0\15\3\27\0"+
    "\4\3\2\0\11\3\1\0\1\3\1\243\3\3\10\0"+
    "\7\3\1\0\15\3\55\0\1\126\107\0\1\125\3\0"+
    "\1\126\1\0\1\126\76\0\1\136\3\0\1\137\3\0"+
    "\1\127\1\0\1\127\3\0\1\141\115\0\1\151\43\0"+
    "\26\131\1\132\1\0\1\244\60\131\2\0\1\131\12\0"+
    "\1\131\2\0\5\131\1\245\4\131\4\0\1\131\2\0"+
    "\2\131\3\0\1\131\44\0\1\23\12\0\1\23\2\0"+
    "\5\23\1\246\4\23\4\0\1\23\2\0\2\23\3\0"+
    "\1\23\100\0\1\247\101\0\1\127\122\0\1\250\50\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\6\3\1\251"+
    "\1\0\1\252\2\3\1\253\11\3\27\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\5\3\1\254\1\3\1\0"+
    "\15\3\27\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\7\3\1\0\1\255\14\3\27\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\7\3\1\0\6\3\1\256\6\3"+
    "\27\0\4\3\2\0\3\3\1\257\5\3\1\0\5\3"+
    "\10\0\7\3\1\0\1\260\14\3\27\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\7\3\1\0\1\261\14\3"+
    "\26\0\27\151\1\21\4\151\1\21\54\151\1\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\7\3\1\0\11\3"+
    "\1\262\3\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\4\3\1\263\2\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\7\3\1\0\3\3"+
    "\1\264\11\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\3\3\1\265\3\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\5\3\1\266\1\3"+
    "\1\0\15\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\6\3\1\267\1\0\7\3\1\270\5\3\27\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\1\271\2\3"+
    "\1\272\3\3\1\0\15\3\27\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\1\3\1\273\5\3\1\0\15\3"+
    "\27\0\4\3\2\0\11\3\1\0\2\3\1\274\2\3"+
    "\10\0\7\3\1\0\15\3\27\0\4\3\2\0\1\3"+
    "\1\275\7\3\1\0\5\3\10\0\7\3\1\0\15\3"+
    "\27\0\4\3\2\0\3\3\1\276\5\3\1\0\1\277"+
    "\1\300\1\3\1\301\1\3\10\0\1\302\2\3\1\303"+
    "\1\3\1\304\1\3\1\0\1\305\1\3\1\306\1\307"+
    "\11\3\27\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\1\3\1\310\5\3\1\0\15\3\27\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\1\3\1\311\5\3\1\0"+
    "\15\3\114\0\1\312\110\0\1\313\23\0\2\73\2\212"+
    "\1\314\12\73\1\0\1\73\1\212\3\73\10\0\7\73"+
    "\1\0\11\73\1\212\3\73\1\314\26\0\1\73\1\213"+
    "\2\212\1\0\1\73\1\215\1\73\2\215\1\73\2\213"+
    "\2\73\1\0\1\73\1\212\1\215\2\73\10\0\7\73"+
    "\1\0\11\73\1\212\3\73\30\0\1\213\11\0\2\213"+
    "\74\0\2\73\2\212\1\0\3\73\1\216\6\73\1\0"+
    "\1\73\1\212\3\73\10\0\7\73\1\0\11\73\1\212"+
    "\3\73\27\0\2\73\2\212\1\0\4\73\1\216\5\73"+
    "\1\0\1\73\1\212\3\73\10\0\7\73\1\0\11\73"+
    "\1\212\3\73\27\0\2\73\2\212\1\0\2\73\1\216"+
    "\2\73\1\216\4\73\1\0\1\73\1\212\3\73\10\0"+
    "\7\73\1\0\11\73\1\212\3\73\27\0\1\73\1\222"+
    "\1\223\1\212\1\0\1\73\1\222\1\315\1\316\1\317"+
    "\1\320\2\222\1\73\1\222\1\0\1\73\1\223\2\222"+
    "\1\73\10\0\3\73\1\222\3\73\1\0\2\73\1\222"+
    "\2\73\1\222\3\73\1\212\1\73\2\222\27\0\1\73"+
    "\1\222\1\223\1\212\1\314\1\73\1\222\1\315\1\316"+
    "\1\317\1\320\2\222\1\73\1\222\1\0\1\73\1\223"+
    "\2\222\1\73\10\0\3\73\1\222\3\73\1\0\2\73"+
    "\1\222\2\73\1\222\3\73\1\212\1\73\2\222\1\314"+
    "\26\0\4\3\2\0\11\3\1\0\5\3\10\0\1\3"+
    "\1\321\5\3\1\0\15\3\27\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\5\3\1\322\1\3\1\0\15\3"+
    "\27\0\4\3\2\0\11\3\1\0\5\3\10\0\6\3"+
    "\1\323\1\0\15\3\27\0\2\73\2\212\1\0\3\73"+
    "\1\230\6\73\1\0\1\73\1\212\3\73\10\0\7\73"+
    "\1\0\11\73\1\212\3\73\27\0\2\73\2\212\1\0"+
    "\4\73\1\230\5\73\1\0\1\73\1\212\3\73\10\0"+
    "\7\73\1\0\11\73\1\212\3\73\27\0\2\73\2\212"+
    "\1\0\2\73\1\230\2\73\1\230\4\73\1\0\1\73"+
    "\1\212\3\73\10\0\7\73\1\0\11\73\1\212\3\73"+
    "\27\0\4\3\2\0\11\3\1\0\5\3\10\0\3\3"+
    "\1\324\3\3\1\0\15\3\27\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\7\3\1\0\5\3\1\325\7\3"+
    "\27\0\4\3\2\0\11\3\1\0\1\3\1\326\3\3"+
    "\10\0\7\3\1\0\15\3\27\0\4\3\2\0\11\3"+
    "\1\0\1\3\1\327\3\3\10\0\7\3\1\0\15\3"+
    "\27\0\4\3\2\0\11\3\1\0\5\3\10\0\7\3"+
    "\1\0\6\3\1\330\6\3\27\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\3\3\1\331\3\3\1\0\15\3"+
    "\27\0\4\3\2\0\11\3\1\0\5\3\10\0\3\3"+
    "\1\332\3\3\1\0\15\3\30\0\2\131\3\0\1\131"+
    "\4\0\2\131\1\0\1\131\2\0\3\131\14\0\1\131"+
    "\6\0\1\131\2\0\1\131\5\0\2\131\30\0\2\23"+
    "\3\0\1\23\4\0\2\23\1\0\1\23\2\0\3\23"+
    "\14\0\1\23\6\0\1\23\2\0\1\23\5\0\2\23"+
    "\64\0\1\333\110\0\1\334\53\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\5\3\1\335\1\3\1\0\15\3"+
    "\27\0\4\3\2\0\1\3\1\336\7\3\1\0\5\3"+
    "\10\0\7\3\1\0\15\3\27\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\7\3\1\0\1\337\14\3\27\0"+
    "\4\3\2\0\3\3\1\340\5\3\1\0\5\3\10\0"+
    "\7\3\1\0\15\3\27\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\1\3\1\341\5\3\1\0\15\3\27\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\5\3\1\342"+
    "\1\3\1\0\15\3\27\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\1\3\1\343\5\3\1\0\15\3\27\0"+
    "\4\3\2\0\11\3\1\0\1\3\1\344\3\3\10\0"+
    "\7\3\1\0\15\3\27\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\7\3\1\0\1\345\2\3\1\346\11\3"+
    "\27\0\4\3\2\0\11\3\1\0\1\3\1\347\3\3"+
    "\10\0\7\3\1\0\15\3\27\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\1\350\6\3\1\0\15\3\27\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\7\3\1\0"+
    "\1\351\14\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\4\3\1\352\2\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\1\3\1\353\3\3\10\0\7\3"+
    "\1\0\15\3\27\0\4\3\2\0\1\3\1\354\7\3"+
    "\1\0\5\3\10\0\7\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\7\3\1\0\1\355"+
    "\14\3\27\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\1\356\6\3\1\0\15\3\27\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\3\3\1\357\3\3\1\0\15\3"+
    "\27\0\4\3\2\0\11\3\1\0\3\3\1\360\1\3"+
    "\10\0\7\3\1\0\15\3\27\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\3\3\1\361\3\3\1\0\15\3"+
    "\27\0\4\3\2\0\11\3\1\0\5\3\10\0\1\3"+
    "\1\362\5\3\1\0\15\3\27\0\4\3\2\0\11\3"+
    "\1\0\4\3\1\363\10\0\7\3\1\0\15\3\27\0"+
    "\4\3\2\0\1\3\1\364\7\3\1\0\5\3\10\0"+
    "\7\3\1\0\15\3\27\0\4\3\2\0\11\3\1\0"+
    "\1\3\1\365\3\3\10\0\7\3\1\0\15\3\27\0"+
    "\4\3\2\0\3\3\1\366\5\3\1\0\5\3\10\0"+
    "\7\3\1\0\1\367\2\3\1\370\11\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\4\3\1\371\2\3"+
    "\1\0\15\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\7\3\1\0\4\3\1\372\3\3\1\373\4\3"+
    "\27\0\4\3\2\0\11\3\1\0\5\3\10\0\1\3"+
    "\1\374\5\3\1\0\15\3\27\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\5\3\1\375\1\3\1\0\15\3"+
    "\27\0\4\3\2\0\11\3\1\0\5\3\10\0\1\3"+
    "\1\376\5\3\1\0\15\3\27\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\7\3\1\0\6\3\1\377\6\3"+
    "\30\0\1\73\11\0\2\73\74\0\2\73\2\212\1\0"+
    "\2\73\1\u0100\1\u0101\1\u0102\5\73\1\0\1\73\1\212"+
    "\3\73\10\0\7\73\1\0\11\73\1\212\3\73\27\0"+
    "\2\73\2\212\1\0\2\73\1\u0100\1\u0103\1\73\1\u0100"+
    "\4\73\1\0\1\73\1\212\3\73\10\0\7\73\1\0"+
    "\11\73\1\212\3\73\27\0\2\73\2\212\1\0\2\73"+
    "\1\u0100\1\73\1\u0103\1\u0100\4\73\1\0\1\73\1\212"+
    "\3\73\10\0\7\73\1\0\11\73\1\212\3\73\27\0"+
    "\2\73\2\212\1\0\3\73\1\u0101\1\u0102\1\u0100\4\73"+
    "\1\0\1\73\1\212\3\73\10\0\7\73\1\0\11\73"+
    "\1\212\3\73\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\4\3\1\u0104\2\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\6\3\1\u0105\1\0"+
    "\15\3\27\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\7\3\1\0\1\u0106\14\3\27\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\1\u0107\6\3\1\0\15\3\27\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\7\3\1\0"+
    "\1\u0108\14\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\7\3\1\0\1\3\1\u0109\13\3\65\0\1\u010a"+
    "\113\0\1\u010b\47\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\7\3\1\0\3\3\1\u010c\11\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\1\u010d\6\3\1\0"+
    "\15\3\27\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\1\u010e\6\3\1\0\15\3\27\0\4\3\2\0\11\3"+
    "\1\0\1\3\1\u010f\3\3\10\0\7\3\1\0\15\3"+
    "\27\0\4\3\2\0\11\3\1\0\5\3\10\0\4\3"+
    "\1\u0110\2\3\1\0\15\3\27\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\1\3\1\u0111\5\3\1\0\5\3"+
    "\1\u0112\7\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\5\3\1\u0113\1\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\7\3\1\0\1\u0114"+
    "\14\3\27\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\7\3\1\0\2\3\1\u0115\12\3\27\0\4\3\2\0"+
    "\11\3\1\0\1\3\1\u0116\3\3\10\0\7\3\1\0"+
    "\15\3\27\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\1\3\1\u0117\5\3\1\0\15\3\27\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\7\3\1\0\2\3\1\u0118"+
    "\12\3\27\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\5\3\1\u0119\1\3\1\0\15\3\27\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\7\3\1\0\1\u011a\14\3"+
    "\27\0\4\3\2\0\1\3\1\u011b\7\3\1\0\5\3"+
    "\10\0\7\3\1\0\15\3\27\0\4\3\2\0\3\3"+
    "\1\u011c\5\3\1\0\5\3\10\0\7\3\1\0\15\3"+
    "\27\0\4\3\2\0\11\3\1\0\3\3\1\u011d\1\3"+
    "\10\0\7\3\1\0\15\3\27\0\4\3\2\0\3\3"+
    "\1\u011e\5\3\1\0\5\3\10\0\7\3\1\0\15\3"+
    "\27\0\4\3\2\0\11\3\1\0\5\3\10\0\7\3"+
    "\1\0\1\u011f\14\3\27\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\5\3\1\u0120\1\3\1\0\15\3\27\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\7\3\1\0"+
    "\3\3\1\u0121\11\3\27\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\5\3\1\u0122\1\3\1\0\15\3\27\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\7\3\1\0"+
    "\1\u0123\14\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\7\3\1\0\6\3\1\u0124\6\3\27\0\4\3"+
    "\2\0\3\3\1\u0125\5\3\1\0\5\3\10\0\7\3"+
    "\1\0\15\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\1\u0126\6\3\1\0\15\3\27\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\7\3\1\0\11\3\1\u0127"+
    "\3\3\27\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\4\3\1\u0128\2\3\1\0\6\3\1\u0129\6\3\27\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\6\3\1\u012a"+
    "\1\0\15\3\27\0\4\3\2\0\3\3\1\u012b\5\3"+
    "\1\0\5\3\10\0\7\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\7\3\1\0\11\3"+
    "\1\u012c\3\3\27\0\2\73\2\212\1\0\3\73\1\u0100"+
    "\6\73\1\0\1\73\1\212\3\73\10\0\7\73\1\0"+
    "\11\73\1\212\3\73\27\0\2\73\2\212\1\0\4\73"+
    "\1\u0100\5\73\1\0\1\73\1\212\3\73\10\0\7\73"+
    "\1\0\11\73\1\212\3\73\27\0\2\73\2\212\1\0"+
    "\2\73\1\u0100\2\73\1\u0100\4\73\1\0\1\73\1\212"+
    "\3\73\10\0\7\73\1\0\11\73\1\212\3\73\27\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\4\3\1\u012d"+
    "\2\3\1\0\15\3\27\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\5\3\1\u012e\1\3\1\0\15\3\27\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\4\3\1\u012f"+
    "\2\3\1\0\15\3\64\0\1\u0130\115\0\1\u0131\46\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\7\3\1\0"+
    "\1\u0132\14\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\4\3\1\u0133\2\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\5\3\1\u0134\1\3"+
    "\1\0\15\3\27\0\4\3\2\0\11\3\1\0\1\3"+
    "\1\u0135\3\3\10\0\7\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\2\3\1\u0136\2\3\10\0\7\3"+
    "\1\0\15\3\27\0\4\3\2\0\11\3\1\0\1\3"+
    "\1\u0137\3\3\10\0\7\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\4\3\1\u0138\2\3"+
    "\1\0\15\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\7\3\1\0\4\3\1\u0139\10\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\7\3\1\0\5\3"+
    "\1\u013a\7\3\27\0\4\3\2\0\11\3\1\0\2\3"+
    "\1\u013b\2\3\10\0\7\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\7\3\1\0\1\u013c"+
    "\14\3\27\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\7\3\1\0\2\3\1\u013d\12\3\27\0\4\3\2\0"+
    "\3\3\1\u013e\5\3\1\0\5\3\10\0\7\3\1\0"+
    "\15\3\27\0\4\3\2\0\11\3\1\0\1\3\1\u013f"+
    "\3\3\10\0\7\3\1\0\15\3\27\0\4\3\2\0"+
    "\11\3\1\0\1\3\1\u0140\3\3\10\0\7\3\1\0"+
    "\15\3\27\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\3\3\1\u0141\3\3\1\0\15\3\27\0\4\3\2\0"+
    "\11\3\1\0\1\3\1\u0142\3\3\10\0\7\3\1\0"+
    "\15\3\27\0\4\3\2\0\3\3\1\u0143\5\3\1\0"+
    "\5\3\10\0\7\3\1\0\15\3\27\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\7\3\1\0\1\u0144\14\3"+
    "\27\0\4\3\2\0\11\3\1\0\5\3\10\0\6\3"+
    "\1\u0145\1\0\15\3\27\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\1\u0146\6\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\7\3\1\0\12\3"+
    "\1\u0147\2\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\5\3\1\u0148\1\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\1\3\1\u0149\3\3\10\0\7\3"+
    "\1\0\15\3\27\0\4\3\2\0\11\3\1\0\1\3"+
    "\1\u014a\3\3\10\0\7\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\7\3\1\0\3\3"+
    "\1\u014b\11\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\7\3\1\0\11\3\1\u014c\3\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\4\3\1\u014d\2\3"+
    "\1\0\15\3\27\0\4\3\2\0\3\3\1\u014e\5\3"+
    "\1\0\5\3\10\0\7\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\1\3\1\u014f\3\3\10\0\7\3"+
    "\1\0\15\3\27\0\4\3\2\0\3\3\1\u0150\5\3"+
    "\1\0\5\3\10\0\7\3\1\0\15\3\26\0\26\u0130"+
    "\1\u0151\1\21\4\u0130\1\21\54\u0130\42\0\1\u0152\47\0"+
    "\4\3\2\0\11\3\1\0\1\3\1\u0153\3\3\10\0"+
    "\7\3\1\0\15\3\27\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\7\3\1\0\2\3\1\u0154\12\3\27\0"+
    "\4\3\2\0\11\3\1\0\2\3\1\u0155\2\3\10\0"+
    "\7\3\1\0\15\3\27\0\4\3\2\0\1\3\1\u0156"+
    "\7\3\1\0\5\3\10\0\7\3\1\0\15\3\27\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\7\3\1\0"+
    "\1\u0157\14\3\27\0\4\3\2\0\3\3\1\u0158\5\3"+
    "\1\0\5\3\10\0\7\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\7\3\1\0\1\u0159"+
    "\14\3\27\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\4\3\1\u015a\2\3\1\0\15\3\27\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\7\3\1\0\1\u015b\14\3"+
    "\27\0\4\3\2\0\11\3\1\0\5\3\10\0\1\u015c"+
    "\6\3\1\0\15\3\27\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\4\3\1\u015d\2\3\1\0\15\3\27\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\5\3\1\u015e"+
    "\1\3\1\0\15\3\27\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\7\3\1\0\12\3\1\u015f\2\3\27\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\4\3\1\u0160"+
    "\2\3\1\0\15\3\27\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\3\3\1\u0161\3\3\1\0\15\3\27\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\1\3\1\u0162"+
    "\5\3\1\0\15\3\27\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\7\3\1\0\1\u0163\14\3\27\0\4\3"+
    "\2\0\3\3\1\u0164\5\3\1\0\5\3\10\0\7\3"+
    "\1\0\15\3\27\0\4\3\2\0\11\3\1\0\1\3"+
    "\1\u0165\3\3\10\0\7\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\1\3\1\u0166\3\3\10\0\7\3"+
    "\1\0\15\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\7\3\1\0\5\3\1\u0167\7\3\27\0\4\3"+
    "\2\0\11\3\1\0\1\3\1\u0168\3\3\10\0\7\3"+
    "\1\0\15\3\26\0\26\u0130\1\u0151\1\u0169\4\u0130\1\21"+
    "\54\u0130\44\0\1\u0130\45\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\1\u016a\6\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\7\3\1\0\1\u016b"+
    "\14\3\27\0\4\3\2\0\11\3\1\0\1\3\1\u016c"+
    "\3\3\10\0\7\3\1\0\15\3\27\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\7\3\1\0\12\3\1\u016d"+
    "\2\3\27\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\5\3\1\u016e\1\3\1\0\15\3\27\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\7\3\1\0\3\3\1\u016f"+
    "\11\3\27\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\5\3\1\u0170\1\3\1\0\15\3\27\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\5\3\1\u0171\1\3\1\0"+
    "\15\3\27\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\1\3\1\u0172\5\3\1\0\15\3\27\0\4\3\2\0"+
    "\11\3\1\0\3\3\1\u0173\1\3\10\0\7\3\1\0"+
    "\15\3\27\0\4\3\2\0\11\3\1\0\1\3\1\u0174"+
    "\3\3\10\0\7\3\1\0\15\3\27\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\7\3\1\0\5\3\1\u0175"+
    "\7\3\27\0\4\3\2\0\11\3\1\0\2\3\1\u0176"+
    "\2\3\10\0\7\3\1\0\15\3\27\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\7\3\1\0\12\3\1\u0177"+
    "\2\3\27\0\4\3\2\0\11\3\1\0\1\3\1\u0178"+
    "\3\3\10\0\7\3\1\0\15\3\27\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\7\3\1\0\5\3\1\u0179"+
    "\7\3\27\0\4\3\2\0\11\3\1\0\4\3\1\u017a"+
    "\10\0\7\3\1\0\15\3\26\0\26\u0130\1\u0151\1\21"+
    "\2\u0130\1\u017b\1\u0130\1\21\1\u017c\53\u0130\1\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\7\3\1\0\12\3"+
    "\1\u017d\2\3\27\0\4\3\2\0\3\3\1\u017e\5\3"+
    "\1\0\5\3\10\0\7\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\5\3\1\u017f\1\3"+
    "\1\0\15\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\4\3\1\u0180\2\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\7\3\1\0\2\3"+
    "\1\u0181\12\3\27\0\4\3\2\0\11\3\1\0\2\3"+
    "\1\u0182\2\3\10\0\7\3\1\0\15\3\27\0\4\3"+
    "\2\0\1\3\1\u0183\7\3\1\0\5\3\10\0\7\3"+
    "\1\0\15\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\7\3\1\0\12\3\1\u0184\2\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\7\3\1\0\12\3"+
    "\1\u0185\2\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\7\3\1\0\12\3\1\u0186\2\3\27\0\4\3"+
    "\2\0\11\3\1\0\4\3\1\u0187\10\0\7\3\1\0"+
    "\15\3\27\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\7\3\1\0\12\3\1\u0188\2\3\26\0\26\u0130\1\u0151"+
    "\1\21\2\u0130\1\u017b\1\u0130\1\21\102\u0130\1\u0189\1\21"+
    "\2\u0130\1\u017c\1\u0130\1\u018a\54\u0130\1\0\4\3\2\0"+
    "\11\3\1\0\1\3\1\u018b\3\3\10\0\7\3\1\0"+
    "\15\3\27\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\1\3\1\u018c\5\3\1\0\15\3\27\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\7\3\1\0\12\3\1\u018d"+
    "\2\3\27\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\7\3\1\0\1\u018e\14\3\27\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\7\3\1\0\12\3\1\u018f\2\3"+
    "\27\0\4\3\2\0\11\3\1\0\5\3\10\0\7\3"+
    "\1\0\1\u0190\14\3\27\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\7\3\1\0\12\3\1\u0191\2\3\27\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\7\3\1\0"+
    "\12\3\1\u0192\2\3\27\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\7\3\1\0\12\3\1\u0193\2\3\27\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\7\3\1\0"+
    "\12\3\1\u0194\2\3\26\0\26\u0130\1\u0151\1\u0195\4\u0130"+
    "\1\21\54\u0130\22\0\1\136\3\0\1\u0196\1\21\2\0"+
    "\1\u0197\1\0\1\u018a\1\127\2\0\1\141\4\0\1\130"+
    "\44\0\4\3\2\0\11\3\1\0\5\3\10\0\7\3"+
    "\1\0\12\3\1\u0198\2\3\27\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\4\3\1\u0199\2\3\1\0\15\3"+
    "\27\0\4\3\2\0\11\3\1\0\1\u019a\4\3\10\0"+
    "\1\3\1\u019b\5\3\1\0\1\u019c\14\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\7\3\1\0\12\3"+
    "\1\u019d\2\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\7\3\1\0\12\3\1\u019e\2\3\27\0\4\3"+
    "\2\0\11\3\1\0\1\3\1\u019f\3\3\10\0\7\3"+
    "\1\0\15\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\7\3\1\0\12\3\1\u01a0\2\3\26\0\26\u0130"+
    "\1\u0189\1\21\2\u0130\1\u01a1\1\u0130\1\u018a\1\u017c\53\u0130"+
    "\27\0\1\u0197\103\0\1\136\3\0\1\u0196\3\0\1\u0197"+
    "\1\0\1\u0197\3\0\1\141\51\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\7\3\1\0\12\3\1\u01a2\2\3"+
    "\27\0\4\3\2\0\11\3\1\0\5\3\10\0\7\3"+
    "\1\0\12\3\1\u01a3\2\3\27\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\3\3\1\u01a4\3\3\1\0\15\3"+
    "\27\0\4\3\2\0\11\3\1\0\2\3\1\u01a5\2\3"+
    "\10\0\7\3\1\0\15\3\27\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\7\3\1\0\10\3\1\u01a6\4\3"+
    "\27\0\4\3\2\0\11\3\1\0\5\3\10\0\7\3"+
    "\1\0\12\3\1\u01a7\2\3\27\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\7\3\1\0\12\3\1\u01a8\2\3"+
    "\26\0\26\u0130\1\u0189\1\21\2\u0130\1\u01a1\1\u0130\1\u018a"+
    "\54\u0130\1\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\7\3\1\0\12\3\1\u01a9\2\3\27\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\7\3\1\0\12\3\1\u01aa"+
    "\2\3\27\0\4\3\2\0\11\3\1\0\2\3\1\u01ab"+
    "\2\3\10\0\7\3\1\0\15\3\27\0\4\3\2\0"+
    "\11\3\1\0\5\3\10\0\7\3\1\0\11\3\1\u01ac"+
    "\3\3\27\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\7\3\1\0\12\3\1\u01ad\2\3\27\0\4\3\2\0"+
    "\3\3\1\u01ae\5\3\1\0\5\3\10\0\3\3\1\u01af"+
    "\3\3\1\0\15\3\27\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\7\3\1\0\3\3\1\u01b0\11\3\27\0"+
    "\4\3\2\0\11\3\1\0\1\3\1\u01b1\3\3\10\0"+
    "\7\3\1\0\15\3\27\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\5\3\1\u01b2\1\3\1\0\15\3\27\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\1\u01b3\6\3"+
    "\1\0\15\3\27\0\4\3\2\0\11\3\1\0\1\3"+
    "\1\u01b4\3\3\10\0\7\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\7\3\1\0\3\3"+
    "\1\u01b5\11\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\7\3\1\0\3\3\1\u01b6\11\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\6\3\1\u01b7\1\0"+
    "\15\3\27\0\4\3\2\0\11\3\1\0\5\3\10\0"+
    "\7\3\1\0\1\u01b8\14\3\27\0\4\3\2\0\11\3"+
    "\1\0\5\3\10\0\7\3\1\0\12\3\1\u01b9\2\3"+
    "\27\0\4\3\2\0\11\3\1\0\5\3\10\0\7\3"+
    "\1\0\1\u01ba\14\3\27\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\1\3\1\u01bb\5\3\1\0\15\3\27\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\7\3\1\0"+
    "\2\3\1\u01bc\12\3\27\0\4\3\2\0\11\3\1\0"+
    "\2\3\1\u01bd\2\3\10\0\7\3\1\0\15\3\27\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\1\3\1\u01be"+
    "\5\3\1\0\15\3\27\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\7\3\1\0\6\3\1\u01bf\6\3\27\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\7\3\1\0"+
    "\11\3\1\u01c0\3\3\27\0\4\3\2\0\11\3\1\0"+
    "\5\3\10\0\3\3\1\u01c1\3\3\1\0\15\3\27\0"+
    "\4\3\2\0\11\3\1\0\5\3\10\0\7\3\1\0"+
    "\1\u01c2\14\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\5\3\1\u01c3\1\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\3\3\1\u01c4\1\3\10\0\7\3"+
    "\1\0\15\3\27\0\4\3\2\0\3\3\1\u01c5\5\3"+
    "\1\0\5\3\10\0\7\3\1\0\15\3\27\0\4\3"+
    "\2\0\11\3\1\0\1\3\1\u01c6\3\3\10\0\7\3"+
    "\1\0\15\3\27\0\4\3\2\0\11\3\1\0\5\3"+
    "\10\0\7\3\1\0\12\3\1\u01c7\2\3\27\0\4\3"+
    "\2\0\11\3\1\0\5\3\10\0\7\3\1\0\11\3"+
    "\1\u01c8\3\3\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26134];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\10\1\1\11\6\1\2\0\1\1\1\11\26\1"+
    "\14\11\1\1\1\11\13\1\2\11\1\0\15\1\1\0"+
    "\1\1\5\0\1\11\3\0\1\11\1\0\7\1\1\0"+
    "\2\11\15\1\3\11\1\1\1\11\1\1\13\11\2\1"+
    "\1\0\7\1\1\11\17\1\1\11\4\0\41\1\2\11"+
    "\1\0\16\1\2\0\55\1\2\0\44\1\2\0\37\1"+
    "\2\0\51\1\1\0\14\1\1\0\14\1\1\0\62\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[456];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


  private StringBuilder comment = null;


  private boolean commentnl = false;


  private String fileName = null;


  public void setFileName(String fileName) {
    this.fileName = fileName;
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Syntax yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   EOF syntax = new EOF();

  syntax.setLocation(new Location(fileName, yyline+1, yycolumn));
  return syntax;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Text<CTag> syntax = new Text<CTag>(CTag.IDENTIFIER, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
            } 
            // fall through
          case 131: break;
          case 2: 
            { Text<CTag> syntax = new Text<CTag>(CTag.OCTALconstant, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
            } 
            // fall through
          case 132: break;
          case 3: 
            { Language<CTag> syntax = new Language<CTag>(CTag.PLUS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 133: break;
          case 4: 
            { Language<CTag> syntax = new Language<CTag>(CTag.DOT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 134: break;
          case 5: 
            { Text<CTag> syntax = new Text<CTag>(CTag.INTEGERconstant, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
            } 
            // fall through
          case 135: break;
          case 6: 
            { Language<CTag> syntax = new Language<CTag>(CTag.QUESTION); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 136: break;
          case 7: 
            { Language<CTag> syntax = new Language<CTag>(CTag.BACKSLASH); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 137: break;
          case 8: 
            { return new Layout(yytext(), true);
            } 
            // fall through
          case 138: break;
          case 9: 
            { return new Layout(yytext(), false);
            } 
            // fall through
          case 139: break;
          case 10: 
            { yyline--; return new Layout(yytext(), false);
            } 
            // fall through
          case 140: break;
          case 11: 
            { Language<CTag> syntax = new Language<CTag>(CTag.HASH); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 141: break;
          case 12: 
            { Language<CTag> syntax = new Language<CTag>(CTag.DIV); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 142: break;
          case 13: 
            { Language<CTag> syntax = new Language<CTag>(CTag.MINUS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 143: break;
          case 14: 
            { Language<CTag> syntax = new Language<CTag>(CTag.GT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 144: break;
          case 15: 
            { Language<CTag> syntax = new Language<CTag>(CTag.LT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 145: break;
          case 16: 
            { Language<CTag> syntax = new Language<CTag>(CTag.ASSIGN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 146: break;
          case 17: 
            { Language<CTag> syntax = new Language<CTag>(CTag.NOT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 147: break;
          case 18: 
            { Language<CTag> syntax = new Language<CTag>(CTag.AND); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 148: break;
          case 19: 
            { Language<CTag> syntax = new Language<CTag>(CTag.PIPE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 149: break;
          case 20: 
            { Language<CTag> syntax = new Language<CTag>(CTag.STAR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 150: break;
          case 21: 
            { Language<CTag> syntax = new Language<CTag>(CTag.MOD); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 151: break;
          case 22: 
            { Language<CTag> syntax = new Language<CTag>(CTag.XOR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 152: break;
          case 23: 
            { Language<CTag> syntax = new Language<CTag>(CTag.LPAREN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 153: break;
          case 24: 
            { Language<CTag> syntax = new Language<CTag>(CTag.RPAREN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 154: break;
          case 25: 
            { Language<CTag> syntax = new Language<CTag>(CTag.COMMA); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 155: break;
          case 26: 
            { Language<CTag> syntax = new Language<CTag>(CTag.LBRACE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 156: break;
          case 27: 
            { Language<CTag> syntax = new Language<CTag>(CTag.RBRACE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 157: break;
          case 28: 
            { Language<CTag> syntax = new Language<CTag>(CTag.LBRACK); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 158: break;
          case 29: 
            { Language<CTag> syntax = new Language<CTag>(CTag.RBRACK); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 159: break;
          case 30: 
            { Language<CTag> syntax = new Language<CTag>(CTag.NEGATE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 160: break;
          case 31: 
            { Language<CTag> syntax = new Language<CTag>(CTag.COLON); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 161: break;
          case 32: 
            { Language<CTag> syntax = new Language<CTag>(CTag.SEMICOLON); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 162: break;
          case 33: 
            { Language<CTag> syntax = new Language<CTag>(CTag.AT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 163: break;
          case 34: 
            { Language<CTag> syntax = new Language<CTag>(CTag.USD); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 164: break;
          case 35: 
            { comment.append(yytext());
            } 
            // fall through
          case 165: break;
          case 36: 
            { comment.append(yytext()); commentnl = true;
            } 
            // fall through
          case 166: break;
          case 37: 
            { Text<CTag> syntax = new Text<CTag>(CTag.PPNUM, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
            } 
            // fall through
          case 167: break;
          case 38: 
            { Text<CTag> syntax = new Text<CTag>(CTag.FLOATINGconstant, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
            } 
            // fall through
          case 168: break;
          case 39: 
            { Language<CTag> syntax = new Language<CTag>(CTag.ICR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 169: break;
          case 40: 
            { Language<CTag> syntax = new Language<CTag>(CTag.PLUSassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 170: break;
          case 41: 
            { Text<CTag> syntax = new Text<CTag>(CTag.STRINGliteral, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
            } 
            // fall through
          case 171: break;
          case 42: 
            { Language<CTag> syntax = new Language<CTag>(CTag.DHASH); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 172: break;
          case 43: 
            { Language<CTag> syntax = new Language<CTag>(CTag.IF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 173: break;
          case 44: 
            { Language<CTag> syntax = new Language<CTag>(CTag.DIVassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 174: break;
          case 45: 
            { yybegin(COMMENT);
comment = new StringBuilder();
comment.append(yytext());
commentnl = false;
            } 
            // fall through
          case 175: break;
          case 46: 
            { Language<CTag> syntax = new Language<CTag>(CTag.DO); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 176: break;
          case 47: 
            { Language<CTag> syntax = new Language<CTag>(CTag.DECR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 177: break;
          case 48: 
            { Language<CTag> syntax = new Language<CTag>(CTag.ARROW); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 178: break;
          case 49: 
            { Language<CTag> syntax = new Language<CTag>(CTag.MINUSassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 179: break;
          case 50: 
            { Language<CTag> syntax = new Language<CTag>(CTag.RS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 180: break;
          case 51: 
            { Language<CTag> syntax = new Language<CTag>(CTag.GE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 181: break;
          case 52: 
            { Language<CTag> syntax = new Language<CTag>(CTag.LS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 182: break;
          case 53: 
            { Language<CTag> syntax = new Language<CTag>(CTag.LE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 183: break;
          case 54: 
            { Language<CTag> syntax = new Language<CTag>(CTag.EQ); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 184: break;
          case 55: 
            { Language<CTag> syntax = new Language<CTag>(CTag.NE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 185: break;
          case 56: 
            { Language<CTag> syntax = new Language<CTag>(CTag.ANDassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 186: break;
          case 57: 
            { Language<CTag> syntax = new Language<CTag>(CTag.ANDAND); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 187: break;
          case 58: 
            { Language<CTag> syntax = new Language<CTag>(CTag.ORassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 188: break;
          case 59: 
            { Language<CTag> syntax = new Language<CTag>(CTag.OROR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 189: break;
          case 60: 
            { Language<CTag> syntax = new Language<CTag>(CTag.MULTassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 190: break;
          case 61: 
            { Language<CTag> syntax = new Language<CTag>(CTag.MODassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 191: break;
          case 62: 
            { Language<CTag> syntax = new Language<CTag>(CTag.ERassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 192: break;
          case 63: 
            { comment.append(yytext()); yybegin(YYINITIAL);
return new Layout(comment.toString(), false);
            } 
            // fall through
          case 193: break;
          case 64: 
            { Text<CTag> syntax = new Text<CTag>(CTag.HEXconstant, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
            } 
            // fall through
          case 194: break;
          case 65: 
            { Language<CTag> syntax = new Language<CTag>(CTag.ELLIPSIS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 195: break;
          case 66: 
            { Language<CTag> syntax = new Language<CTag>(CTag.FOR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 196: break;
          case 67: 
            { Text<CTag> syntax = new Text<CTag>(CTag.CHARACTERconstant, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
            } 
            // fall through
          case 197: break;
          case 68: 
            { Language<CTag> syntax = new Language<CTag>(CTag.ASM); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 198: break;
          case 69: 
            { Language<CTag> syntax = new Language<CTag>(CTag.INT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 199: break;
          case 70: 
            { Language<CTag> syntax = new Language<CTag>(CTag.RSassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 200: break;
          case 71: 
            { Language<CTag> syntax = new Language<CTag>(CTag.LSassign); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 201: break;
          case 72: 
            { Language<CTag> syntax = new Language<CTag>(CTag.LONG); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 202: break;
          case 73: 
            { Language<CTag> syntax = new Language<CTag>(CTag.VOID); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 203: break;
          case 74: 
            { Language<CTag> syntax = new Language<CTag>(CTag.ELSE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 204: break;
          case 75: 
            { Language<CTag> syntax = new Language<CTag>(CTag.ENUM); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 205: break;
          case 76: 
            { Language<CTag> syntax = new Language<CTag>(CTag.AUTO); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 206: break;
          case 77: 
            { Language<CTag> syntax = new Language<CTag>(CTag.GOTO); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 207: break;
          case 78: 
            { Language<CTag> syntax = new Language<CTag>(CTag.CASE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 208: break;
          case 79: 
            { Language<CTag> syntax = new Language<CTag>(CTag.CHAR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 209: break;
          case 80: 
            { Language<CTag> syntax = new Language<CTag>(CTag.UNION); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 210: break;
          case 81: 
            { Language<CTag> syntax = new Language<CTag>(CTag.FLOAT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 211: break;
          case 82: 
            { Language<CTag> syntax = new Language<CTag>(CTag.BREAK); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 212: break;
          case 83: 
            { Language<CTag> syntax = new Language<CTag>(CTag.WHILE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 213: break;
          case 84: 
            { Language<CTag> syntax = new Language<CTag>(CTag.CONST); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 214: break;
          case 85: 
            { Language<CTag> syntax = new Language<CTag>(CTag.SHORT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 215: break;
          case 86: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__ASM); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 216: break;
          case 87: 
            { Language<CTag> syntax = new Language<CTag>(CTag._BOOL); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 217: break;
          case 88: 
            { Language<CTag> syntax = new Language<CTag>(CTag.EXTERN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 218: break;
          case 89: 
            { Language<CTag> syntax = new Language<CTag>(CTag.RETURN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 219: break;
          case 90: 
            { Language<CTag> syntax = new Language<CTag>(CTag.INLINE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 220: break;
          case 91: 
            { Language<CTag> syntax = new Language<CTag>(CTag.TYPEOF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 221: break;
          case 92: 
            { Language<CTag> syntax = new Language<CTag>(CTag.SWITCH); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 222: break;
          case 93: 
            { Language<CTag> syntax = new Language<CTag>(CTag.SIGNED); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 223: break;
          case 94: 
            { Language<CTag> syntax = new Language<CTag>(CTag.SIZEOF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 224: break;
          case 95: 
            { Language<CTag> syntax = new Language<CTag>(CTag.STRUCT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 225: break;
          case 96: 
            { Language<CTag> syntax = new Language<CTag>(CTag.STATIC); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 226: break;
          case 97: 
            { Language<CTag> syntax = new Language<CTag>(CTag.DOUBLE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 227: break;
          case 98: 
            { Language<CTag> syntax = new Language<CTag>(CTag.TYPEDEF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 228: break;
          case 99: 
            { Language<CTag> syntax = new Language<CTag>(CTag.DEFAULT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 229: break;
          case 100: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__ASM__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 230: break;
          case 101: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__CONST); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 231: break;
          case 102: 
            { Language<CTag> syntax = new Language<CTag>(CTag.UNSIGNED); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 232: break;
          case 103: 
            { Language<CTag> syntax = new Language<CTag>(CTag.VOLATILE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 233: break;
          case 104: 
            { Language<CTag> syntax = new Language<CTag>(CTag.REGISTER); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 234: break;
          case 105: 
            { Language<CTag> syntax = new Language<CTag>(CTag.RESTRICT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 235: break;
          case 106: 
            { Language<CTag> syntax = new Language<CTag>(CTag.CONTINUE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 236: break;
          case 107: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__INLINE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 237: break;
          case 108: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__THREAD); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 238: break;
          case 109: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__TYPEOF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 239: break;
          case 110: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__SIGNED); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 240: break;
          case 111: 
            { Language<CTag> syntax = new Language<CTag>(CTag._COMPLEX); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 241: break;
          case 112: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__LABEL__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 242: break;
          case 113: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__ALIGNOF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 243: break;
          case 114: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__CONST__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 244: break;
          case 115: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__VOLATILE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 245: break;
          case 116: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__RESTRICT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 246: break;
          case 117: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__INLINE__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 247: break;
          case 118: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__TYPEOF__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 248: break;
          case 119: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__SIGNED__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 249: break;
          case 120: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__ALIGNOF__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 250: break;
          case 121: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__ATTRIBUTE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 251: break;
          case 122: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__COMPLEX__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 252: break;
          case 123: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__VOLATILE__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 253: break;
          case 124: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__RESTRICT__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 254: break;
          case 125: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__EXTENSION__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 255: break;
          case 126: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__ATTRIBUTE__); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 256: break;
          case 127: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__BUILTIN_VA_ARG); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 257: break;
          case 128: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__BUILTIN_VA_LIST); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 258: break;
          case 129: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__BUILTIN_OFFSETOF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 259: break;
          case 130: 
            { Language<CTag> syntax = new Language<CTag>(CTag.__BUILTIN_TYPES_COMPATIBLE_P); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
            } 
            // fall through
          case 260: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
